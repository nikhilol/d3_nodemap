{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["axios","require","myConfig","window","innerHeight","innerWidth","App","useState","data","setData","activeNode","setActiveNode","mdValue","setMdValue","updateNodeData","nodeId","property","newValue","temp","key","nodes","id","useEffect","mounted","get","then","_d","console","log","links","ID","x","y","parseInt","svg","Platform","md","Title","push","source","target","color","IsComplete","style","display","height","background","className","width","renderHTML","text","marked","onChange","html","replace","value","config","onClickNode","node","onNodePositionChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f7a25c8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport { Graph } from 'react-d3-graph'\nimport React, { useState, useEffect } from 'react'\nimport './App.css';\n\nimport MarkdownIt from 'markdown-it'\nimport marked from 'marked'\nimport MdEditor from 'react-markdown-editor-lite'\nimport 'react-markdown-editor-lite/lib/index.css';\nimport Editor from \"rich-markdown-editor\"\n\nconst axios = require('axios')\nconst d3 = require(\"d3\");\n\n\nconst myConfig = {\n  \"automaticRearrangeAfterDropNode\": false,\n  \"collapsible\": false,\n  \"directed\": false,\n  \"focusAnimationDuration\": 0.75,\n  \"focusZoom\": 1,\n  \"freezeAllDragEvents\": false,\n  \"height\": window.innerHeight - 10,\n  \"highlightDegree\": 1,\n  \"highlightOpacity\": 1,\n  \"linkHighlightBehavior\": false,\n  \"maxZoom\": 8,\n  \"minZoom\": 0.1,\n  \"nodeHighlightBehavior\": false,\n  \"panAndZoom\": false,\n  \"staticGraph\": false,\n  \"staticGraphWithDragAndDrop\": true,\n  \"width\": window.innerWidth * 0.7,\n  \"d3\": {\n    \"alphaTarget\": 0.05,\n    \"gravity\": -100,\n    \"linkLength\": 100,\n    \"linkStrength\": 1,\n    \"disableLinkForce\": true\n  },\n  \"node\": {\n    \"color\": \"#d3d3d3\",\n    \"fontColor\": \"black\",\n    \"fontSize\": 24,\n    \"fontWeight\": \"bold\",\n    \"highlightColor\": \"SAME\",\n    \"highlightFontSize\": 36,\n    \"highlightFontWeight\": \"normal\",\n    \"highlightStrokeColor\": \"SAME\",\n    \"highlightStrokeWidth\": \"SAME\",\n    \"labelProperty\": \"Title\",\n    \"mouseCursor\": \"pointer\",\n    \"opacity\": 1,\n    \"renderLabel\": true,\n    \"size\": 600,\n    \"strokeColor\": \"black\",\n    \"strokeWidth\": 1.5,\n    \"symbolType\": \"circle\",\n  },\n  \"link\": {\n    \"fontColor\": \"black\",\n    \"fontSize\": 24,\n    \"fontWeight\": \"normal\",\n    \"highlightColor\": \"SAME\",\n    \"highlightFontSize\": 36,\n    \"highlightFontWeight\": \"normal\",\n    \"labelProperty\": \"label\",\n    \"mouseCursor\": \"pointer\",\n    \"opacity\": 1,\n    \"renderLabel\": false,\n    \"semanticStrokeWidth\": false,\n    \"strokeWidth\": 1.5,\n    \"markerHeight\": 6,\n    \"markerWidth\": 6,\n    \"strokeDasharray\": 0,\n    \"strokeDashoffset\": 0,\n    \"strokeLinecap\": \"butt\"\n  }\n}\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [activeNode, setActiveNode] = useState(null)\n  const [mdValue, setMdValue] = useState('')\n\n  function getData() {\n    return axios.get('https://us-central1-nodemap-app.cloudfunctions.net/api/plan/nodes?username=Demo&plan_id=Test').then(_d => _d.data)\n  }\n\n  useEffect(() => {\n    let mounted = true;\n    getData()\n      .then(data => {\n        console.log(data)\n        let links = []\n        for (var key in data) {\n\n          console.log(key)\n\n          data[key].id = data[key].ID;\n          delete data[key].ID;\n\n          data[key].x = data[key].x ? data[key].x :  100;\n          data[key].y = data[key].y ? data[key].y : parseInt(key) * 150\n\n          data[key].svg = `/Logos/${data[key].Platform}`\n          if (!data[key].md) {\n            data[key].md = `## ${data[key].Title} ${data[key].Platform} ##`\n          }\n          if (key > 0) {\n            links.push({ source: data[key - 1].id, target: data[key].id, color: data[key].IsComplete ? '#72EFDD' : '#D2D2D2' })\n          }\n\n        }\n        console.log(data)\n        if (mounted) {\n          console.log({ nodes: data })\n          setData({ nodes: data, links: links })\n        }\n      })\n    return () => mounted = false;\n  }, [])\n\n  const onClickNode = function (nodeId, node) {\n    setActiveNode(node)\n    setMdValue(node.md)\n    console.log(node)\n  };\n\n  const handleEditorChange = ({ html, text }) => {\n    const newValue = text.replace(/\\d/g, \"\");\n    console.log(newValue);\n    setMdValue(newValue);\n    updateNodeData(activeNode.id, 'md', newValue)\n    activeNode.md = newValue\n  }\n\n  function updateNodeData(nodeId, property, newValue) {\n    let temp = data\n    for (let key in temp.nodes) {\n      if (temp.nodes[key].id === nodeId) {\n        temp.nodes[key][property] = newValue\n      }\n    }\n    setData(temp)\n  };\n\n  function onNodePositionChange(node){\n    updateNodeData(node.id, 'fx', node.x)\n  }\n\n  return (\n    <div style={{ display: 'flex', height: '100vh', background:'#F7F6F2' }} className=\"App\">\n      {data &&\n        <>\n          <div style={{height:'100vh'}}>\n            <MdEditor\n              style={{ height: \"100%\", width: '100%' }}\n              renderHTML={(text) => marked(text)}\n              onChange={handleEditorChange}\n              value={mdValue}\n            />\n\n          </div>\n          <div style={{ width: '60%' }}>\n            <Graph\n              id=\"graph_id\"\n              data={data}\n              config={myConfig}\n              onClickNode = {onClickNode}\n              onNodePositionChange = {onNodePositionChange}\n            />\n          </div>\n        </>\n      }\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}